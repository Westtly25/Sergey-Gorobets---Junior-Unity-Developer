//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Settings/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Gameplay Action Map"",
            ""id"": ""2fa28a79-8821-445f-9d18-5998e7d9985b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a95fdcc7-c6b7-40b2-a955-dfbb780d40a8"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""81b90c9d-e985-4e7a-96a3-d054d2918b78"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""914948d4-54a6-43f2-a39a-aff4bda31187"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""4a2d72a0-d500-4c8a-ad7c-8295ad7df601"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""First Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""1ce98abd-1a66-4ed0-8f56-00601a7d3269"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Second Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""67e2b90b-624f-47ea-83c1-f68ddc5b9e71"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Thirde Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""e92b1951-4326-4196-9727-9d9b8eb3c61d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""aa7b5d47-2e08-4159-9172-a22080457dfa"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9ed831b6-85be-4af6-a620-ef00a195f1b4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerInpurControls"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d8254772-bb14-473f-8b6c-8dfa870ffafa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerInpurControls"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f73d3f49-4930-4423-9f61-06430649e6a8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerInpurControls"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""dbe60405-1389-4f7c-bb25-9c492bb5e672"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerInpurControls"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrays"",
                    ""id"": ""e04ceebe-4c34-445e-9e85-a1f1c162d097"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""31f1cb8e-0240-405e-9d87-1cb823a5f423"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerInpurControls"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3fc6862b-e0e9-45c2-a0ec-65fb2928351c"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerInpurControls"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""875d98ec-bded-46aa-9b00-22d6f91d53ec"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerInpurControls"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""63e4070a-06b3-4062-96b4-344d1a198672"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerInpurControls"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""84c37cd1-0ed9-4c86-9317-3af03653c752"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerInpurControls"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a24d388f-f301-41b6-8223-25a3498d71af"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerInpurControls"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3898b32-5bc4-4d90-9949-373281707f27"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23208e46-283d-4456-9e9d-8e0dddcf5caf"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""First Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91a78bba-d3db-4195-ac67-55d4a695c6e0"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Second Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e104c20-6484-4f91-92f2-71313fb8c69b"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thirde Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI Action Map"",
            ""id"": ""89bab267-f938-4906-b663-41ff49568e86"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""818ca814-5d74-422e-8e0d-09b34bb93948"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b78f2f53-ef70-4ee8-b672-c2cb2ea9060d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerInpurControls"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PlayerInpurControls"",
            ""bindingGroup"": ""PlayerInpurControls"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gameplay Action Map
        m_GameplayActionMap = asset.FindActionMap("Gameplay Action Map", throwIfNotFound: true);
        m_GameplayActionMap_Move = m_GameplayActionMap.FindAction("Move", throwIfNotFound: true);
        m_GameplayActionMap_Shoot = m_GameplayActionMap.FindAction("Shoot", throwIfNotFound: true);
        m_GameplayActionMap_Sprint = m_GameplayActionMap.FindAction("Sprint", throwIfNotFound: true);
        m_GameplayActionMap_ChangeWeapon = m_GameplayActionMap.FindAction("Change Weapon", throwIfNotFound: true);
        m_GameplayActionMap_FirstWeapon = m_GameplayActionMap.FindAction("First Weapon", throwIfNotFound: true);
        m_GameplayActionMap_SecondWeapon = m_GameplayActionMap.FindAction("Second Weapon", throwIfNotFound: true);
        m_GameplayActionMap_ThirdeWeapon = m_GameplayActionMap.FindAction("Thirde Weapon", throwIfNotFound: true);
        // UI Action Map
        m_UIActionMap = asset.FindActionMap("UI Action Map", throwIfNotFound: true);
        m_UIActionMap_Newaction = m_UIActionMap.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay Action Map
    private readonly InputActionMap m_GameplayActionMap;
    private List<IGameplayActionMapActions> m_GameplayActionMapActionsCallbackInterfaces = new List<IGameplayActionMapActions>();
    private readonly InputAction m_GameplayActionMap_Move;
    private readonly InputAction m_GameplayActionMap_Shoot;
    private readonly InputAction m_GameplayActionMap_Sprint;
    private readonly InputAction m_GameplayActionMap_ChangeWeapon;
    private readonly InputAction m_GameplayActionMap_FirstWeapon;
    private readonly InputAction m_GameplayActionMap_SecondWeapon;
    private readonly InputAction m_GameplayActionMap_ThirdeWeapon;
    public struct GameplayActionMapActions
    {
        private @PlayerInput m_Wrapper;
        public GameplayActionMapActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_GameplayActionMap_Move;
        public InputAction @Shoot => m_Wrapper.m_GameplayActionMap_Shoot;
        public InputAction @Sprint => m_Wrapper.m_GameplayActionMap_Sprint;
        public InputAction @ChangeWeapon => m_Wrapper.m_GameplayActionMap_ChangeWeapon;
        public InputAction @FirstWeapon => m_Wrapper.m_GameplayActionMap_FirstWeapon;
        public InputAction @SecondWeapon => m_Wrapper.m_GameplayActionMap_SecondWeapon;
        public InputAction @ThirdeWeapon => m_Wrapper.m_GameplayActionMap_ThirdeWeapon;
        public InputActionMap Get() { return m_Wrapper.m_GameplayActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionMapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @ChangeWeapon.started += instance.OnChangeWeapon;
            @ChangeWeapon.performed += instance.OnChangeWeapon;
            @ChangeWeapon.canceled += instance.OnChangeWeapon;
            @FirstWeapon.started += instance.OnFirstWeapon;
            @FirstWeapon.performed += instance.OnFirstWeapon;
            @FirstWeapon.canceled += instance.OnFirstWeapon;
            @SecondWeapon.started += instance.OnSecondWeapon;
            @SecondWeapon.performed += instance.OnSecondWeapon;
            @SecondWeapon.canceled += instance.OnSecondWeapon;
            @ThirdeWeapon.started += instance.OnThirdeWeapon;
            @ThirdeWeapon.performed += instance.OnThirdeWeapon;
            @ThirdeWeapon.canceled += instance.OnThirdeWeapon;
        }

        private void UnregisterCallbacks(IGameplayActionMapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @ChangeWeapon.started -= instance.OnChangeWeapon;
            @ChangeWeapon.performed -= instance.OnChangeWeapon;
            @ChangeWeapon.canceled -= instance.OnChangeWeapon;
            @FirstWeapon.started -= instance.OnFirstWeapon;
            @FirstWeapon.performed -= instance.OnFirstWeapon;
            @FirstWeapon.canceled -= instance.OnFirstWeapon;
            @SecondWeapon.started -= instance.OnSecondWeapon;
            @SecondWeapon.performed -= instance.OnSecondWeapon;
            @SecondWeapon.canceled -= instance.OnSecondWeapon;
            @ThirdeWeapon.started -= instance.OnThirdeWeapon;
            @ThirdeWeapon.performed -= instance.OnThirdeWeapon;
            @ThirdeWeapon.canceled -= instance.OnThirdeWeapon;
        }

        public void RemoveCallbacks(IGameplayActionMapActions instance)
        {
            if (m_Wrapper.m_GameplayActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActionMapActions @GameplayActionMap => new GameplayActionMapActions(this);

    // UI Action Map
    private readonly InputActionMap m_UIActionMap;
    private List<IUIActionMapActions> m_UIActionMapActionsCallbackInterfaces = new List<IUIActionMapActions>();
    private readonly InputAction m_UIActionMap_Newaction;
    public struct UIActionMapActions
    {
        private @PlayerInput m_Wrapper;
        public UIActionMapActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_UIActionMap_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_UIActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IUIActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionMapActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IUIActionMapActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IUIActionMapActions instance)
        {
            if (m_Wrapper.m_UIActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActionMapActions @UIActionMap => new UIActionMapActions(this);
    private int m_PlayerInpurControlsSchemeIndex = -1;
    public InputControlScheme PlayerInpurControlsScheme
    {
        get
        {
            if (m_PlayerInpurControlsSchemeIndex == -1) m_PlayerInpurControlsSchemeIndex = asset.FindControlSchemeIndex("PlayerInpurControls");
            return asset.controlSchemes[m_PlayerInpurControlsSchemeIndex];
        }
    }
    public interface IGameplayActionMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnChangeWeapon(InputAction.CallbackContext context);
        void OnFirstWeapon(InputAction.CallbackContext context);
        void OnSecondWeapon(InputAction.CallbackContext context);
        void OnThirdeWeapon(InputAction.CallbackContext context);
    }
    public interface IUIActionMapActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
